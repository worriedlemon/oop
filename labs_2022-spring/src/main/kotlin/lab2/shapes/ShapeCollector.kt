package lab2.shapes

data class ShapeCollector(
    private val _shapes: MutableList<ColoredShape2D> = emptyList<ColoredShape2D>().toMutableList()
) {
    fun add(shape: ColoredShape2D) {
        _shapes.add(shape)
    }

    fun findShapeWithMinArea(): ColoredShape2D {
        if (_shapes.isEmpty()) error("There are no shapes yet")

        var foundShape: ColoredShape2D = _shapes[0]
        for (i in 1 until _shapes.size) {
            if (foundShape.calcArea() > _shapes[i].calcArea()) {
                foundShape = _shapes[i]
            }
        }
        return foundShape
    }

    fun findShapeWithMaxArea(): ColoredShape2D {
        if (_shapes.isEmpty()) error("There are no shapes yet")

        var foundShape: ColoredShape2D = _shapes[0]
        for (i in 1 until _shapes.size) {
            if (foundShape.calcArea() < _shapes[i].calcArea()) {
                foundShape = _shapes[i]
            }
        }
        return foundShape
    }

    fun getAreasSum(): Double {
        if (_shapes.isEmpty()) error("There are no shapes yet")
        var result = 0.0;
        _shapes.forEach {
            result += it.calcArea()
        }
        return result
    }

    fun findShapesWithBorderColor(borderColor: Color): List<ColoredShape2D> {
        return _shapes.filter { it.borderColor == borderColor }
    }

    fun findShapesWithFillColor(fillColor: Color): List<ColoredShape2D> {
        return _shapes.filter { it.fillColor == fillColor }
    }

    fun getShapes(): MutableList<ColoredShape2D> = _shapes

    fun getShapesCount(): Int = _shapes.size

    fun getShapesGroupedByBorderColor(): Map<Color, List<ColoredShape2D>> {
        return _shapes.groupBy { it.borderColor }
    }

    fun getShapesGroupedByFillColor(): Map<Color, List<ColoredShape2D>> {
        return _shapes.groupBy { it.fillColor }
    }

    // Almost fully autogenerated :)
    inline fun <reified T> getAllShapesByType(): List<ColoredShape2D> {
        return this.getShapes().filter { it is T }
    }
}